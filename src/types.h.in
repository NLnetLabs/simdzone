/*
 * types.h -- resource record descriptors for (DNS) zone files
 *
 * Copyright (c) 2022, NLnet Labs. All rights reserved.
 *
 * See LICENSE for the license.
 *
 */
#ifndef ZONE_TYPES_H
#define ZONE_TYPES_H

#include "parser.h"

typedef zone_return_t(*rdata_parse_t)(
  zone_parser_t *, const zone_token_t *, zone_field_t *, void *);

struct rdata_descriptor {
  zone_rdata_descriptor_t public;
  rdata_parse_t typed;
  rdata_parse_t generic;
};

struct type_descriptor {
  zone_type_descriptor_t public;
  const struct rdata_descriptor *rdata;
  //struct rdata_descriptor *rdata;
  // FIXME: need cleanup/finalize functions. i.e. for wks cleanup?
};


zone_return_t zone_parse_period(
  zone_parser_t *par, const zone_token_t *tok, zone_field_t *fld, void *ptr);

zone_return_t zone_parse_time(
  zone_parser_t *par, const zone_token_t *tok, zone_field_t *fld, void *ptr);

zone_return_t zone_parse_int8(
  zone_parser_t *par, const zone_token_t *tok, zone_field_t *fld, void *ptr);

zone_return_t zone_parse_int16(
  zone_parser_t *par, const zone_token_t *tok, zone_field_t *fld, void *ptr);

zone_return_t zone_parse_int32(
  zone_parser_t *par, const zone_token_t *tok, zone_field_t *fld, void *ptr);

zone_return_t zone_parse_ip4(
  zone_parser_t *par, const zone_token_t *tok, zone_field_t *fld, void *ptr);

zone_return_t zone_parse_generic_ip4(
  zone_parser_t *par, const zone_token_t *tok, zone_field_t *fld, void *ptr);

zone_return_t zone_parse_ip6(
  zone_parser_t *par, const zone_token_t *tok, zone_field_t *fld, void *ptr);

zone_return_t zone_parse_generic_ip6(
  zone_parser_t *par, const zone_token_t *tok, zone_field_t *fld, void *ptr);

zone_return_t parse_name(
  zone_parser_t *par, const zone_token_t *tok, zone_field_t *fld, void *ptr);

zone_return_t zone_parse_algorithm(
  zone_parser_t *par, const zone_token_t *tok, zone_field_t *fld, void *ptr);

zone_return_t zone_parse_certificate(
  zone_parser_t *par, const zone_token_t *tok, zone_field_t *fld, void *ptr);

zone_return_t zone_parse_type(
  zone_parser_t *par, const zone_token_t *tok, zone_field_t *fld, void *ptr);

zone_return_t zone_parse_base64(
  zone_parser_t *par, const zone_token_t *tok, zone_field_t *fld, void *ptr);

zone_return_t zone_parse_domain_name(
  zone_parser_t *par, const zone_token_t *tok, zone_field_t *fld, void *ptr);

zone_return_t zone_parse_string(
  zone_parser_t *par, const zone_token_t *tok, zone_field_t *fld, void *ptr);

zone_return_t zone_parse_generic_string(
  zone_parser_t *par, const zone_token_t *tok, zone_field_t *fld, void *ptr);

zone_return_t zone_parse_wks_protocol(
  zone_parser_t *par, const zone_token_t *tok, zone_field_t *fld, void *ptr);

zone_return_t zone_parse_wks(
  zone_parser_t *par, const zone_token_t *tok, zone_field_t *fld, void *ptr);

zone_return_t zone_parse_generic_wks(
  zone_parser_t *par, const zone_token_t *tok, zone_field_t *fld, void *ptr);

zone_return_t zone_parse_svc_param(
  zone_parser_t *par, const zone_token_t *tok, zone_field_t *fld, void *ptr);

zone_return_t zone_parse_generic_svc_param(
  zone_parser_t *par, const zone_token_t *tok, zone_field_t *fld, void *ptr);

static const struct type_descriptor wks_descriptor =
  { .public = { .name = "WKS", .length = 3, .type = 11, .options = ZONE_COMPLEX, .description = "Well known services" },
    .rdata = (const struct rdata_descriptor[]){
      { .public = { .name = "address", .length = 7, .type = ZONE_IP4, .qualifiers = { .flags = 0 }, .description = NULL },
        .typed = 0,
        .generic = 0 },
      { .public = { .name = "protocol", .length = 8, .type = ZONE_INT8, .qualifiers = { .flags = 0 }, .description = NULL },
        .typed = zone_parse_wks_protocol,
        .generic = 0 },
      { .public = { .name = "bitmap", .length = 6, .type = ZONE_WKS, .qualifiers = { .flags = 0 }, .description = NULL },
        .typed = 0,
        .generic = 0 },
      { .public = { .name = NULL, .length = 0, .type = 0, .qualifiers = { .flags = 0 }, .description = NULL },
        .typed = 0,
        .generic = 0 }
    }
  };

static const zone_map_t type_map[] = {
@NAMES@
};

static const struct type_descriptor descriptors[] = {
@DESCRIPTORS@
};

#endif // ZONE_TYPES_H
