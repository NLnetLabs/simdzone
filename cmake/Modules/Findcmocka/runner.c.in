/*
 * runner.c.in -- boilerplate test runner for cmocka CMake module
 *
 * Copyright (c) 2020, Jeroen Koekkoek
 *
 * See LICENSE for the license.
 *
 */
#include <stdarg.h>
#include <stddef.h>
#include <setjmp.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <cmocka.h>

static struct {
  int print_help;
  const char *group_pattern;
  const char *test_pattern;
} options = { 0, "*", "*" };

struct group {
  const char *name;
  const struct CMUnitTest *tests;
  CMFixtureFunction setup;
  CMFixtureFunction teardown;
};

/*
 * Copied from Eclipse Cyclone DDS (src/cmake/Modules/CUnit/src/main.c.in)
 * under the terms of the BSD-3-Clause license on January 19th 2020.
 *
 * Copyright (c) 2006 to 2018, ADLINK Technology Limited and others
 */
static int patmatch(const char *pat, const char *str)
{
  while (*pat) {
    if (*pat == '?') {
      /* any character will do */
      if (*str++ == 0) {
        return 0;
      }
      pat++;
    } else if (*pat == '*') {
      /* collapse a sequence of wildcards, requiring as many
         characters in str as there are ?s in the sequence */
      while (*pat == '*' || *pat == '?') {
        if (*pat == '?' && *str++ == 0) {
          return 0;
        }
        pat++;
      }
      /* try matching on all positions where str matches pat */
      while (*str) {
        if (*str == *pat && patmatch(pat+1, str+1)) {
          return 1;
        }
        str++;
      }
      return *pat == 0;
    } else {
      /* only an exact match */
      if (*str++ != *pat++) {
        return 0;
      }
    }
  }

  return *str == 0;
}

static void usage(const char *prog)
{
  fprintf(stderr, "Usage: %s OPTIONS\n", prog);
  fprintf(stderr, "Try '%s -h' for more information\n", prog);
}

static void help(const char *prog)
{
  printf("Usage: %s [OPTIONS]\n", prog);
  printf("\n");
  printf("Options:\n");
  printf("  -h           Show this help message and exit\n");
  printf("  -g  PATTERN  Run only tests in suites matching pattern\n");
  printf("  -t  PATTERN  Run only tests matching pattern\n");
  printf("\n");
}

static int parse_options(int argc, char *argv[])
{
  int err = 0;

  for (int i = 1; err == 0 && i < argc; i++) {
    switch ((argv[i][0] == '-') ? argv[i][1] : 0) {
      case 'h':
        options.print_help = 1;
        break;
      case 'g':
        if ((i+1) < argc) {
          options.group_pattern = argv[++i];
          break;
        }
        /* fall through */
      case 't':
        if ((i+1) < argc) {
          options.test_pattern = argv[++i];
          break;
        }
        /* fall through */
      default:
        err = 1;
        break;
    }
  }

  return err;
}

@cmocka_functions@

@cmocka_test_groups@

#define exec_tests(group, setup, teardown) \
  do { \
    if (patmatch(options.group_pattern, #group)) { \
      cnt += cmocka_run_group_tests(group, setup, teardown); \
    } \
  } while(0)

int main(int argc, char *argv[])
{
  int cnt = 0; /* number of failed tests */
  char *prog = argv[0];

  for (char *sep = argv[0]; *sep; sep++) {
    if (*sep == '/' || *sep == '\\') {
      prog = sep + 1;
    }
  }

  if (parse_options(argc, argv) != 0) {
    usage(prog);
    return 1;
  } else if (options.print_help) {
    help(prog);
    return 0;
  }

  cmocka_set_test_filter(options.test_pattern);

@cmocka_run_tests@

  return (cnt != 0);
}
